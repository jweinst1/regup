[0m[[0mdebug[0m] [0m[naha] The regup.HLineTo source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) regup.HLineTo: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) regup.HLineTo.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of /Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala: Set(<init>, ==, toString)[0m
[0m[[0mdebug[0m] [0m[naha] The regup.LineTo$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) regup.LineTo$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) regup.LineTo$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of /Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala: Set(<init>, ==, toString)[0m
[0m[[0mdebug[0m] [0m[naha] The regup.BezierTo$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) regup.BezierTo$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) regup.BezierTo$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of /Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala: Set(<init>, ==, toString)[0m
[0m[[0mdebug[0m] [0m[naha] The regup.HLineTo$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) regup.HLineTo$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) regup.HLineTo$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of /Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala: Set(<init>, ==, toString)[0m
[0m[[0mdebug[0m] [0m[naha] The regup.ClosePath$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) regup.ClosePath$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) regup.ClosePath$.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of /Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala: Set(<init>, ==, toString)[0m
[0m[[0mdebug[0m] [0m[naha] The regup.LineTo source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) regup.LineTo: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) regup.LineTo.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of /Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala: Set(<init>, ==, toString)[0m
[0m[[0mdebug[0m] [0m[naha] The regup.SvgUtils$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	wrapPath.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) regup.SvgUtils$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) regup.SvgUtils$.[0m
[0m[[0mdebug[0m] [0m[naha] None of the modified names appears in /Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala. This dependency is not being considered for invalidation.[0m
[0m[[0mdebug[0m] [0m[naha] The regup.ClosePath source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) regup.ClosePath: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) regup.ClosePath.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of /Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala: Set(<init>, ==, toString)[0m
[0m[[0mdebug[0m] [0m[naha] The regup.Path source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) regup.Path: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) regup.Path.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of /Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala: Set(<init>, ==, toString)[0m
[0m[[0mdebug[0m] [0m[naha] The regup.BezierTo source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) regup.BezierTo: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) regup.BezierTo.[0m
[0m[[0mdebug[0m] [0m[naha] The following modified names cause invalidation of /Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala: Set(<init>, ==, toString)[0m
[0m[[0mdebug[0m] [0m[naha] [0m
[0m[[0mdebug[0m] [0m[naha] Initial source changes: [0m
[0m[[0mdebug[0m] [0m[naha] 	removed:Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	added: Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	modified: Set()[0m
[0m[[0mdebug[0m] [0m[naha] Invalidated products: Set()[0m
[0m[[0mdebug[0m] [0m[naha] External API changes: API Changes: Set(NamesChange(regup.HLineTo,ModifiedNames(regularNames = notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo, implicitNames = )), NamesChange(regup.LineTo$,ModifiedNames(regularNames = notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo, implicitNames = )), NamesChange(regup.BezierTo$,ModifiedNames(regularNames = notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo, implicitNames = )), NamesChange(regup.HLineTo$,ModifiedNames(regularNames = notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo, implicitNames = )), NamesChange(regup.ClosePath$,ModifiedNames(regularNames = notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo, implicitNames = )), NamesChange(regup.LineTo,ModifiedNames(regularNames = notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo, implicitNames = )), NamesChange(regup.SvgUtils$,ModifiedNames(regularNames = wrapPath, implicitNames = )), NamesChange(regup.ClosePath,ModifiedNames(regularNames = notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo, implicitNames = )), NamesChange(regup.Path,ModifiedNames(regularNames = notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo, implicitNames = )), NamesChange(regup.BezierTo,ModifiedNames(regularNames = notify, x, wait, copy$default$2, $asInstanceOf, copy$default$5, productArity, equals, y, asInstanceOf, synchronized, $isInstanceOf, canEqual, copy$default$4, productPrefix, notifyAll, isInstanceOf, <init>, y1, ==, clone, $init$, next, copy$default$3, copy, x1, toString, !=, getClass, copy$default$1, ne, eq, productIterator, ##, finalize, productElement, hashCode, QuadraticTo, implicitNames = )))[0m
[0m[[0mdebug[0m] [0m[naha] Modified binary dependencies: Set()[0m
[0m[[0mdebug[0m] [0m[naha] Initial directly invalidated sources: Set()[0m
[0m[[0mdebug[0m] [0m[naha] [0m
[0m[[0mdebug[0m] [0m[naha] Sources indirectly invalidated by:[0m
[0m[[0mdebug[0m] [0m[naha] 	product: Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	binary dep: Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	external source: Set(/Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala)[0m
[0m[[0mdebug[0m] [0mAll initially invalidated sources: Set(/Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala)[0m
[0m[[0mdebug[0m] [0m[naha] Initial set of included nodes: Set(/Users/Josh/scalaprojects/regup/src/test/scala/regup/CoreTests.scala)[0m
[0m[[0mdebug[0m] [0m[naha] Recompiling all 1 sources: invalidated sources (1) exceeded 50.0% of all sources[0m
[0m[[0minfo[0m] [0mCompiling 1 Scala source to /Users/Josh/scalaprojects/regup/target/scala-2.12/test-classes...[0m
[0m[[0mdebug[0m] [0mGetting org.scala-sbt:compiler-interface:0.13.13:component from component compiler for Scala 2.12.2[0m
[0m[[0mdebug[0m] [0mGetting org.scala-sbt:compiler-interface:0.13.13:component from component compiler for Scala 2.12.2[0m
[0m[[0mdebug[0m] [0mRunning cached compiler 742abeb7, interfacing (CompilerInterface) with Scala compiler version 2.12.2[0m
[0m[[0mdebug[0m] [0mCalling Scala compiler with arguments  (CompilerInterface):[0m
[0m[[0mdebug[0m] [0m	-bootclasspath[0m
[0m[[0mdebug[0m] [0m	/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/classes:/Users/Josh/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.2.jar[0m
[0m[[0mdebug[0m] [0m	-classpath[0m
[0m[[0mdebug[0m] [0m	/Users/Josh/scalaprojects/regup/target/scala-2.12/test-classes:/Users/Josh/scalaprojects/regup/target/scala-2.12/classes:/Users/Josh/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar:/Users/Josh/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar:/Users/Josh/.ivy2/cache/org.scala-lang/scala-reflect/jars/scala-reflect-2.12.2.jar:/Users/Josh/.ivy2/cache/org.scala-lang.modules/scala-xml_2.12/bundles/scala-xml_2.12-1.0.5.jar:/Users/Josh/.ivy2/cache/org.scala-lang.modules/scala-parser-combinators_2.12/bundles/scala-parser-combinators_2.12-1.0.4.jar[0m
[0m[[0mdebug[0m] [0mScala compilation took 2.135867746 s[0m
[0m[[0mdebug[0m] [0m[naha] New invalidations:[0m
[0m[[0mdebug[0m] [0m[naha] 	Set()[0m
[0m[[0mdebug[0m] [0m[naha] Initial set of included nodes: Set()[0m
[0m[[0mdebug[0m] [0m[naha] Previously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0mdebug[0m] [0m[naha] 	Set()[0m
[0m[[0mdebug[0m] [0m[naha] All newly invalidated sources after taking into account (previously) recompiled sources:Set()[0m
